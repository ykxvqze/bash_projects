#!/usr/bin/env bash

<< 'EOF'
Transpose CSV data

USAGE:
    ./transpose file.csv
    cat file.csv | ./transpose

INPUT:
    - CSV file or input piped via stdin

OUTPUT:
    - Transposed data

EXAMPLES:
    echo col{1..10} | tr ' ' ',' >> file.csv
    echo {1..10}    | tr ' ' ',' >> file.csv
    echo {11..20}   | tr ' ' ',' >> file.csv
    echo {21..30}   | tr ' ' ',' >> file.csv

    ./transpose file.csv
    cat file.csv | ./transpose
EOF

__source_utility_functions () { :; }
__print_usage              () { :; }
__tp                       () { :; }
__parse_options            () { :; }
__parse_arguments          () { :; }
__check_csv_format         () { :; }
__main                     () { :; }

__source_utility_functions() {
    src_dir="$(realpath "$(dirname "${BASH_SOURCE[0]}")")"
    checkcsv="${src_dir}/checkcsv"
}

__print_usage(){
    echo -e "Transpose CSV data.

    USAGE:
          ./transpose file.csv
          cat file.csv | ./transpose \n"
}

__tp() {
    # f: string containing file content or stdin content
    local f="${1}"

    n_row="$(echo "${f}" | wc -l)"
    if [ "$n_row" -eq 1 ]; then
        echo "${f}" | tr ',' '\n'
    else   
        n_col=$(echo "$f" | head -1 | tr ',' '\n' | wc -l)
        for i in $(seq 1 "${n_col}"); do
            echo "${f}" | cut -d ',' -f "$i" | tr '\n' ',' | rev | cut -c 2- | rev 
        done
    fi
}

__parse_options() {
    while getopts 'h' option; do
        case "$option" in
            h) __print_usage; exit 0;;
            *) echo 'Invalid option. Exiting ...'; exit 1;;
        esac
    done
}

__parse_arguments() {
    argf="${1}"
    if [ -n "${argf}" ]; then
        f="$(cat "${argf}")"
    else
        f="$(</dev/stdin)"
    fi
}

__check_csv_format() {
    echo "${f}" | "${checkcsv}" || exit 1
}

__main() {
    __source_utility_functions
    __parse_options "$@"
    __parse_arguments "$@"
    __check_csv_format
    __tp "${f}"
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    __main "$@"
fi
