#!/usr/bin/env bash

<< 'EOF'
Write to a row or a column of CSV data

USAGE:
    ./write <-c column | -r row> <data>  <file>

INPUT:
    - CSV data to write
    - CSV file, or contents via stdin

OUTPUT:
    - CSV data of same dimensions as the original but with a row or column overwritten

EXAMPLES:
    echo col{1..10} | tr ' ' ',' >> file.csv
    echo {1..10}    | tr ' ' ',' >> file.csv
    echo {11..20}   | tr ' ' ',' >> file.csv
    echo {21..30}   | tr ' ' ',' >> file.csv

    ./write -r 2 31,32,33,34,35,36,37,38,39,40 file.csv    # overwrite row 2
    ./write -c 2 a,b,c,d file.csv                          # overwrite col 2

EOF

__source_utility_functions () { :; }
__print_usage              () { :; }
__write_row                () { :; }
__write_col                () { :; }
__parse_arguments          () { :; }
__check_arguments          () { :; }
__check_csv_format         () { :; }
__apply_write              () { :; }
__main                     () { :; }

__source_utility_functions() {
    src_dir="$(realpath "$(dirname "${BASH_SOURCE[0]}")")"
    source "${src_dir}/utils.sh"

    transpose="${src_dir}/transpose"
    slice="${src_dir}/slice"
    drop="${src_dir}/drop"
    insert="${src_dir}/insert"
    checkcsv="${src_dir}/checkcsv"
}

__print_usage() {
    echo -e "Overwrite a row or a column in a CSV file.

    USAGE:

        ./${0##*/} -r 2 31,32,33,34,35,36,37,38,39,40 file.csv
        ./${0##*/} -c 2 a,b,c,d file.csv
        cat file.csv | ./${0##*/} -c 2 a,b,c,d \n"
}

__write_row() {
<< 'EOF'
    row_number: integer or name
    row_data  : cv list
    f         : string containing file content or stdin content
EOF
    local row_number="${1}"
    local row_data="${2}"
    local f="${3}"

    row_indices="$(echo "${f}" | "${transpose}" | head -1)"
    row_number="$(str2num "${row_number}" "${row_indices}")"
    n_row="$(echo "${f}" | "${transpose}" | head -1 | tr ',' '\n' | wc -l)"

    # check row number is valid
    if [ "${row_number}" -gt "${n_row}" -o "${row_number}" -lt 1 ]; then
            echo 'Invalid input.'
            return 1
    fi

    # check number of data items is valid
    n_col="$(echo "${f}" | head -1 | tr ',' '\n' | wc -l)"
    n_data="$(echo "${row_data}" | tr ',' '\n' | wc -l)"

    if [ "${n_data}" -ne "${n_col}" ]; then
        echo 'Invalid number of elements.'
        return 1
    fi

    f_temp1="$(echo "${f}" | "${drop}" -r "${row_number}")"
    f_temp2="$(echo "${f_temp1}" | "${insert}" -r "${row_data}")"

    n_row=$(echo "${f_temp2}" | "${transpose}" | head -1 | tr ',' '\n' | wc -l)
    if [ "${row_number}" -eq 1 ]; then
        echo "${f_temp2}" | "${slice}" -r "${n_row}",1-"$((n_row-1))"
    elif [ "${row_number}" -eq "${n_row}" ]; then
        echo "${f_temp2}" | "${slice}" -r 1-"${n_row}"
    else
        echo "${f_temp2}" | "${slice}" -r 1-"$((row_number-1))","${n_row}","$((row_number))"-"$((n_row-1))"
    fi
}

__write_col() {
<< 'EOF'
    col_number: integer or name
    col_data  : cv list
    f         : string containing file content or stdin content
EOF
    local col_number="${1}"
    local col_data="${2}"
    local f="${3}"

    header="$(echo "${f}" | head -1)"
    col_number="$(str2num "${col_number}" "${header}")"
    n_col="$(echo "${header}" | tr ',' '\n' | wc -l)"

    # check col number is valid
    if [ "${col_number}" -gt "${n_col}" -o "${col_number}" -lt 1 ]; then
            echo 'Invalid input.'
            return 1
    fi

    # check number of data items is valid
    n_data="$(echo "${col_data}" | tr ',' '\n' | wc -l)"
    n_row="$(echo "${f}" | "${transpose}" | head -1 | tr ',' '\n' | wc -l)"

    if [ "${n_data}" -ne "${n_row}" ]; then
        echo 'Invalid number of elements.'
        return 1
    fi

    f_temp1="$(echo "${f}" | "${drop}" -c "${col_number}")"
    f_temp2="$(echo "${f_temp1}" | "${insert}" -c "${col_data}")"

    n_col=$(echo "${f_temp2}" | head -1 | tr ',' '\n' | wc -l)
    if [ "${col_number}" -eq 1 ]; then
        echo "${f_temp2}" | "${slice}" -c "${n_col}",1-"$((n_col-1))"
    elif [ "${col_number}" -eq "${n_col}" ]; then
        echo "${f_temp2}" | "${slice}" -c 1-"${n_col}"
    else
        echo "${f_temp2}" | "${slice}" -c 1-"$((col_number-1))","${n_col}","$((col_number))"-"$((n_col-1))"
    fi
}

__parse_arguments() {
    args=()
    while [ "$#" -gt 0 ]; do
        case "${1}" in
            -h ) __print_usage; exit 0;;
            -c ) col_number="${2}"; shift; shift ;;
            -r ) row_number="${2}"; shift; shift ;;
            -* ) echo "Unknown option ${1}. Exiting ..."; exit 1;;
             * ) args+=("${1}"); shift;;
        esac
    done

}

__check_arguments() {
    if [ -z "${col_number}" -a -z "${row_number}" ]; then
        echo 'No row or column provided!'
        exit 1
    fi

    if [ -n "${col_number}" -a -n "${row_number}" ]; then
        echo 'Provide either row or column data, not both.'
        exit 1
    fi

    data="${args[0]}"

    if [ -z "${data}" ]; then
        echo 'No data provided!'
        exit 1
    fi

    argf="${args[1]}"
    if [ -n "${argf}" ]; then
        f="$(cat "${argf}")"
    else
        f="$(</dev/stdin)"
    fi
}

__check_csv_format() {
    echo "${f}" | "${checkcsv}" || exit 1
}

__apply_write() {
    if [ -z "${col_number}" -a -n "${row_number}" ]; then
        __write_row "${row_number}" "${data}" "${f}"
    elif [ -z "${row_number}" -a -n "${col_number}" ]; then
        __write_col "${col_number}" "${data}" "${f}"
    fi
}

__main() {
    __source_utility_functions
    __parse_arguments "$@"
    __check_arguments
    __check_csv_format
    __apply_write
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    __main "$@"
fi
