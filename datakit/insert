#!/usr/bin/env bash

<< 'EOF'
Insert a row or column to CSV data

USAGE:
    ./insert <-c column_data | -r row_data> <file>

INPUT:
    - CSV data in a file, or via stdin

OUTPUT:
    - The original data with an additional row or column added

EXAMPLES:
    echo col{1..10} | tr ' ' ',' >> file.csv
    echo {1..10}    | tr ' ' ',' >> file.csv
    echo {11..20}   | tr ' ' ',' >> file.csv
    echo {21..30}   | tr ' ' ',' >> file.csv

    ./insert -c col11,11,21,31 file.csv    # add a column of data
EOF

__source_utility_functions () { :; }
__print_usage              () { :; }
__insert_row               () { :; }
__insert_column            () { :; }
__parse_arguments          () { :; }
__check_arguments          () { :; }
__check_csv_format         () { :; }
__apply_insert             () { :; }
__main                     () { :; }

__source_utility_functions() {
    src_dir="$(realpath "$(dirname "${BASH_SOURCE[0]}")")"
    transpose="${src_dir}/transpose"
    checkcsv="${src_dir}/checkcsv"
}

__print_usage(){
    echo -e "Insert a row or a column data to a CSV file.

    USAGE:
          ./insert -r 31,32,33,34,35,36,37,38,39,40 file.csv
          ./insert -c col11,11,21,31 file.csv
          cat file.csv | ./insert -c col11,11,21,31 \n"
}

__insert_row() {
<< 'EOF'
    # data_csv: csv list
    # f       : string containing file content or stdin content
EOF
    local data_csv="${1}"
    local f="${2}"

    # check number of items
    n_col=$(echo "${f}" | head -1 | tr ',' '\n' | wc -l)
    n_data=$(echo "${data_csv}" | tr ',' '\n' | wc -l)

    if [ "${n_data}" -ne "${n_col}" ]; then
        echo 'Invalid number of elements.'
        return 1
    fi

    {
    echo "${f}"
    echo "${data_csv}"
    }
}

__insert_column() {
<< 'EOF'
    # data_csv: csv list
    # f       : string containing file content or stdin content
EOF
    local data_csv="${1}"
    local f="${2}"

    # check number of items
    n_row=$(echo "${f}" | "${transpose}" | head -1 | tr ',' '\n' | wc -l)
    n_data=$(echo "${data_csv}" | tr ',' '\n' | wc -l)

    if [ "${n_data}" -ne "${n_row}" ]; then
        echo 'Invalid number of elements.'
        exit 1
    fi

    {
    echo "${f}" | "${transpose}"
    echo "${data_csv}"
    } | "${transpose}"
}

__parse_arguments() {
    args=()
    while [ "$#" -gt 0 ]; do
        case "${1}" in
            -h ) __print_usage; exit 0;;
            -c ) col_data="${2}"; shift; shift ;;
            -r ) row_data="${2}"; shift; shift ;;
            -* ) echo "Unknown option ${1}. Exiting ..."; exit 1;;
             * ) args+=("${1}"); shift;;
        esac
    done
}

__check_arguments() {
    if [ -z "${col_data}" -a -z "${row_data}" ]; then
        echo 'No data provided!'
        return 1
    fi

    argf="${args[0]}"
    if [ -n "${argf}" ]; then
        f="$(cat "${argf}")"
    else
        f="$(</dev/stdin)"
    fi
}

__check_csv_format() {
    echo "${f}" | "${checkcsv}" || return 1
}

__apply_insert() {
    if [ -z "$col_data" -a -n "$row_data" ]; then
        __insert_row "$row_data" "$f"
    elif [ -z "$row_data" -a -n "$col_data" ]; then
        __insert_column "$col_data" "$f"
    else
        echo 'Provide either row or column data, not both.'
        exit 1
    fi
}

__main() {
    __source_utility_functions
    __parse_arguments "$@"
    __check_arguments
    __check_csv_format
    __apply_insert
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    __main "$@"
fi
