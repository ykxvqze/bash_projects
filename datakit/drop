#!/usr/bin/env bash

<< 'EOF'
Drop rows/columns from CSV data

USAGE:
    ./drop <-c column_list | -r row_list> <file>

INPUT:
    - CSV data in a file, or via stdin

OUTPUT:
    - A slice of the original data with specified rows and/or columns dropped

EXAMPLES:
    echo col{1..10} | tr ' ' ',' >> file.csv
    echo {1..10}    | tr ' ' ',' >> file.csv
    echo {11..20}   | tr ' ' ',' >> file.csv
    echo {21..30}   | tr ' ' ',' >> file.csv

    ./drop -r 1,3 -c 1-5 file.csv    # drop rows 1 and 3 and columns 1 till 5
EOF

__source_utility_functions () { :; }
__print_usage              () { :; }
__deselect_col             () { :; }
__deselect_row             () { :; }
__parse_arguments          () { :; }
__check_arguments          () { :; }
__check_csv_format         () { :; }
__apply_drop               () { :; }
__main                     () { :; }

__source_utility_functions() {
    src_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
    source "${src_dir}/utils.sh"

    transpose="${src_dir}/transpose"
    checkcsv="${src_dir}/checkcsv"
}

__print_usage(){
    echo -e "Drop rows and/or columns from a CSV file.

    USAGE:
          ./drop -r 1,3 -c 1-5 file.csv"
}

__deselect_col(){
<< 'EOF'
    # col_list: csv string
    # f       : string containing file content or stdin content
EOF
    local col_list="${1}"
    local f="${2}"

    n_col="$(echo "${f}" | head -1 | tr ',' '\n' | wc -l)"
    header="$(echo "${f}" | head -1)"

    col_list="$(__str2num "${col_list}" "${header}")"
    col_list="$(__enumerate "${col_list}" "${n_col}")"

    # check that all numbers are in range
    for i in $(echo "${col_list}" | tr ',' ' '); do
        if [ "$i" -ge "${n_col}" ]; then
            echo 'Invalid input'
            return 1
        fi
    done

    # -s for one-column case (i.e. no delimiter present)
    echo "${f}" | cut --complement -s -d ',' -f "${col_list}"
}

__deselect_row() {
<< 'EOF'
    # row_list: csv string
    # f       : string containing file content or stdin content
EOF
    local row_list="$1"
    local f="$2"

    f_temp=$(echo "${f}" | "${transpose}")
    __deselect_col "${row_list}" "${f_temp}" | "${transpose}"
}

__parse_arguments() {
    args=()
    while [ "$#" -gt 0 ]; do
        case "${1}" in
            -h ) __print_usage; exit 0;;
            -c ) col_list="${2}"; shift; shift ;;
            -r ) row_list="${2}"; shift; shift ;;
            -* ) echo "Unknown option ${1}. Exiting ..."; exit 1;;
             * ) args+=("${1}"); shift;;
        esac
    done
}

__check_arguments() {
    if [ -z "${col_list}" -a -z "${row_list}" ]; then
        echo 'No data provided!'
        exit 1
    fi

    argf="${args[0]}"
    if [ -n "${argf}" ]; then
        f="$(cat "${argf}")"
    else
        f="$(</dev/stdin)"
    fi
}

__check_csv_format() {
    echo "${f}" | "${checkcsv}" || exit 1
}

__apply_drop() {
    # row deselect
    if [ -z "${col_list}" ] && [ -n "${row_list}" ]; then
         __deselect_row "${row_list}" "${f}"
    fi
    # column deselect
    if [ -z "${row_list}" ] && [ -n "${col_list}" ]; then
        __deselect_col "${col_list}" "${f}"
    fi
    # row and column deselect
    if [ -n "${col_list}" ] && [ -n "${row_list}" ]; then
        f_temp="$(__deselect_col "${col_list}" "${f}")"
        __deselect_row "${row_list}" "${f_temp}"
    fi
}

__main() {
    __source_utility_functions
    __parse_arguments "$@"
    __check_arguments "$@"
    __check_csv_format
    __apply_drop
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    __main "$@"
fi
